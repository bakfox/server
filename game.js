import chalk from 'chalk';
import readlineSync from 'readline-sync';

let day = 1; // 날자
let dayStack = 1; //아침 점심 오후

let stageStack = 1; //스테이지 큰범위 관련 맵 -
let stageCount = 1; //작은 범위;

let battleEnd = true; // 배틀 상태

let playerGold = 0; // 플레이어 관련

const playerAdventureSprit_SpecialEvent = {
  //1: 덫 2: 상자 3: 상자 보상 4: 상자 미믹
  1: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢶⣦⣄⠀⠀⠀⠀⠈⠻⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣴⣶⣶⣶⣶⣄⣠⣀⡀⣀⣀⣀⣀⣀⢀⢀⣈⣿⣷⣦⠀⠀⠀⠀⠘⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣿⠏⠁⠀⠀⠀⠸⠟⠉⠋⠀⠙⠙⠛⠛⠛⠛⠟⠛⠙⠛⠻⣷⠀⠀⠀⠀⠘⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠻⢷⣶⣶⢿⠿⠿⡾⣶⣶⣶⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣿⣿⡗⠀⠀⠀⠀⠀⠉⠙⠻⢷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⣻⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⢺⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡵⣿⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣶⢿⣯⣿⠝⢻⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠿⣿⣷⣿⠁⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢾⣷⣶⣤⣀⠀⠀⠈⣿⡇⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠹⣿⡍⠛⢿⣶⣼⡿⠀⠀⢐⣿⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠈⠻⣿⣄⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣀⡀⠀⠀⣺⡏⠀⠀⠀⠀⠘⣿⡄⣸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠺⣿⡿⠿⣿⣿⡃⠀⠀⠀⠀⠀⢻⣧⢺⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢼⡷⠀⣿⣿⠀⠀⠀⠀⠀⠀⢸⣿⡿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⣿⠃⠀⣿⣟⠀⠀⠀⠀⠀⣠⣾⠟⠁⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣾⡏⠀⠀⣿⣗⠀⠀⠀⠀⣴⡿⠃⠀⠀⢽⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢰⣿⠁⠀⠀⠹⣿⡀⠀⢀⣾⠟⠀⠀⠀⠀⢸⣿⠀⠀⠀⣶⡿⢷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⢺⣷⡀⠀⠀⠀⠹⣿⣤⣾⠏⠀⠀⠀⠀⠀⠀⣿⡇⢰⡄⠀⠀⢀⠈⠙⣅⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡇
⠀⠙⢿⣶⣤⣤⣀⢨⣿⠋⠀⠀⠀⠀⠀⢀⣤⣿⣷⡀⠀⣿⣇⣽⣷⣘⡛⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠉⠉⠛⢿⣯⣄⡀⠀⠀⢀⣴⡿⠋⢙⣿⣿⠿⢿⡟⣿⡟⠛⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⣷⣶⡿⠋⠀⣠⣶⣿⡯⠀⠈⠀⠉⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⢐⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⠀⣠⣤⣤⡄⠀⣾⣟⣿⣦⣼⡿⠉⠙⢿⣿⢷⢷⣶⣶⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⢰⣿⠉⠉⠀⠀⢙⣻⡿⢷⣿⠂⠀⠀⠀⠉⢾⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⢸⣿⠀⠀⣿⣦⣾⣿⠁⣼⡧⠀⠀⠀⠀⠀⢘⣿⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡿⠀⠀⠀⠀⣤⠄⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⠀⢫⡀⢀⣿⣿⣅⠉⢀⣿⠇⠀⠀⠀⠀⠀⣸⡿⠹⣷⣄⠀⠀⠀⠀⠀⠀⠀⢠⣿⠃⠀⠀⠀⠀⣈⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⠀⠹⣿⣬⣿⡎⠋⠀⣾⡟⠀⠀⠀⠀⢀⣴⣿⠁⠀⠈⢿⣦⠀⠀⠀⠀⠀⠀⣿⠏⠀⠀⠀⠀⢨⣿⠃⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠀⠀⠀⠀⠀⠈⠙⢹⣷⠀⢰⣿⡑⠿⣶⣾⡿⠃⠉⠘⠿⣷⣶⣼⡿⠀⠀⠀⢀⣶⣾⡿⠀⠀⠀⢀⣴⡿⠋⠀⠀⠀⠀⠀⠀⠀⢿⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣦⣿⣿⡇⠀⢠⣾⠇⠀⠀⠀⠀⠀⠈⠈⠀⠀⠀⢀⣺⡟⠙⠃⠀⠀⣠⣾⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠃
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠁⣿⡇⣰⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠋⠁⠀⠀⢀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠽⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⠀⠀⣠⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠟⠀⠀⠀⠀⠀⣰⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⢼⣟⠀⠀⠀⢀⢀⡰⣿⣃⣀⣀⣠⣠⣠⣤⣤⣤⣴⡤⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⣀⣀⣾⡿⣧⢤⣦⣤⣴⣴⣶⡿⠇⠀⠀⠀⠚⠛⠛⠛⠛⠛⠛⠙⠙⠉⠉⠉⠉⠈⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠾⠿⠿⠿⠿⠟⠟⠛⠛⠋⠀⠁⠀⠉⠉⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
  2: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣠⡴⠎⠁⠁⠀⠀⠸⠶⠚⠋⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣍⠁⢹⡇⠀⠀⠀⠀⠀⠀⠀⣤⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢾⠇⠀⠀⠀⠀⠀⠀⢀⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡴⣖⢧⣀⢀⣀⠀⠀⠀⣰⣿⢶⡶⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠋⢹⡏⠀⠉⠋⠉⠛⠛⠙⠉⢸⡏⠉⠉⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣆⣀⠘⣧⣤⣀⣀⣀⣀⣠⡤⢶⣿⣠⣠⣴⡾⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡉⠉⠉⡽⠁⠈⠉⠉⠉⠀⠀⢀⢿⡼⠛⣏⢉⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⣸⠃⠀⠀⠀⢀⣠⠴⠞⠋⠉⠀⠀⡇⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣧⡏⠀⠀⢀⡴⠏⠁⠀⠀⠀⠀⠀⢰⡇⣽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⢰⡏⠀⠀⠀⠀⠀⠀⠀⢠⡞⢱⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣷⣄⣼⣧⣤⣤⢤⢤⠤⠴⠼⠿⠶⠿⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
  3: `

⠀⠀⠀⠀⣴⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣴⣶⣶⣶⣶⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⠉⠀⠀⠀⢠⣶⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⡿⠟⠋⠉⠁⠀⠀⠉⠙⢿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⠋⠀⠀⠀⠀⠺⢿⣷⣦⠀⠈⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢰⣶⣦⣦⣤⣤⡀⠀⣾⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⠏⠀⠀⢀⣤⣴⣤⣄⡀⠘⣿⣇⠀⢺⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠉⠉⠙⠛⠃⢨⣿⠇⠀⠀⠀⠀⠀⠀⢀⣾⡗⠀⠀⠀⣼⣿⠛⠉⠙⢻⣷⠀⠿⠗⠀⢸⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢼⣿⠀⠀⠀⠀⠀⠀⠀⣾⣿⠀⠀⠀⠀⣿⡧⠀⢠⣶⣾⣶⠄⣠⡄⠀⣸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠹⠫⠀⠀⠀⠀⠀⠀⠀⣿⡇⢠⣶⡀⠀⢹⣿⡄⠈⢁⣻⣿⠀⠉⠁⢀⣿⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣿⡇⢸⣿⡂⠀⠀⠙⢿⢿⡿⠿⠿⠀⠀⠀⣼⡿⠁⠀⠀⠀⠀⠀⠀⣼⣷⠀⠀⠀⠀⣠⣤⡄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⠈⢿⣷⣀⡀⢀⢀⠀⢠⣄⠀⠀⠀⣸⣿⠃⠀⠀⠀⠀⠀⠀⣰⣿⠃⠀⠀⠀⠀⠈⠉⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠿⣷⣦⡙⠿⠿⠿⠿⠃⠈⠁⢀⣠⣾⡿⠃⠀⠀⠀⠀⠀⠀⣾⡿⠋⠀⠀⠀⣶⣦⣦⡄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣷⣶⣦⣦⣴⣴⣾⡿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⡀⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⡿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠿⠻⠻⠻⠻⠿⠿⣿⣆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⠟⠉⠀⠀⢸⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡀⠀⠀⠀⠀⠀⠀⣸⣿⠂⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡿⠋⠀⠀⠀⠀⠀⢸⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀⠀⠀⠀⠀⣾⡟⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣿⡟⠀⠀⠀⠀⠀⠀⠀⢸⣿⠅⠀⢀⣠⣤⣶⣶⣶⣦⡀⠀⠀⠀⠀⣾⡿⠀⠀⢀⠀⠀⠀⣸⣿⠅⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠠⣿⡇⠀⠀⠀⠀⠀⠀⠀⠰⣿⣇⣾⡿⠛⠙⠉⠁⠉⠁⠀⠀⠐⣷⣶⣿⣿⣶⡿⡿⢿⣷⣄⣿⡏⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣿⣗⠀⣀⣤⣤⣤⣤⣤⣾⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⠿⠛⠉⠁⠀⠀⣨⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⡄⣿⡟⠙⠋⠛⠙⢽⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣄⠀⠀⠀⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣶⣿⠟⣹⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠫⣜⡿⣿⣦⣤⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⡟⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣌⠉⠛⢿⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣆⣼⡿⠃⠀⠀⠀⠀⣠⣾⡶⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠉⠋⣤⣤⠙⢋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⣿⡿⠁⠀⠀⠀⠠⣿⠿⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⣷⠄⠀⠀⠈⢛⣅⢿⣷⣄⠀⠀⢀⣄⡀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣯⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣶⠄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡖⠈⠀⠀⠀⢀⣿⡟⠀⠙⠻⣿⣶⣿⡿⢿⣷⣴⣴⣶⣶⢔⣾⡿⠁⢿⣿⠿⣿⣶⣄⠀⠀⠀⠀⠀⠈⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⠁⠀⠀⠀⠀⠈⠀⠀⠀⠉⠉⠉⠉⠀⠈⠁⠀⠀⠘⣿⡇⠀⠙⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠿⠟⠁⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣾⡿⠃⠀⠀⠘⢿⣷⣦⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣃⣀⡀⡀⢛⢿⣷⣦⣤⣤⣠⣀⣀⡀⡀⢀⢀⣀⣄⣤⣶⡾⠿⣿⡋⣀⣀⣀⣴⣷⣀⣜⣿⣧⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠠⣿⡿⠿⠻⠻⠿⠿⠿⢿⣿⡟⠙⠛⠛⠻⠻⠿⠿⠿⠿⠻⠛⠋⠁⠀⠈⣿⣿⠻⠛⣿⣿⣿⡟⠛⠋⢻⣿⠄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⡄⠀⠀⠀⠀⠀⣼⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣴⣾⠿⠋⣻⣿⠀⠀⣽⣿⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⠀⠀⠀⠀⣰⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⣾⡿⠟⠋⠁⠀⠀⣺⣿⠀⢀⣿⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣇⠀⠀⢠⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⡿⠿⠛⠉⠁⠀⠀⠀⠀⠀⠀⢾⣟⠀⢰⣿⠅⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⢀⣾⡿⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡏⠀⣺⣿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣴⣿⠅⠀⠀⠀⠀⠀⢀⣴⣾⠟⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡇⢐⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⡏⠀⠀⠀⠀⠀⣴⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠃⣾⡿⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣟⠀⠀⠀⠀⠀⣾⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡿⠃⢰⣿⡃⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣦⠀⠀⠀⠀⣿⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣿⣟⡁⢠⣿⠟⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣷⣀⣀⣀⣼⣿⣄⣄⣄⣄⣤⣤⣤⣤⣤⣤⣴⣤⣦⣮⣿⣿⣿⣿⣷⣾⣿⣧⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠿⠿⠟⠟⠟⠻⠛⠛⠛⠛⠋⠋⠙⠉⠉⠉⠉⠉⠉⠉⠉⠈⠈⠀⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
  4: `

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣠⣤⣴⣴⣶⣶⣶⣶⣶⣷⣶⣶⣶⣶⣶⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣾⠿⠟⠛⠙⠉⠉⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠋⠛⠛⠀⢴⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣷⣦⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⣠⣶⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣿⡄⠀⠀⠀⠀
⠀⠀⣀⣴⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⣀⣀⣠⣠⣄⣤⣠⣠⣠⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⠀⠀⠀
⠀⢰⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⡿⠿⠿⠟⠟⠛⠛⠙⠙⠙⠙⠙⠛⠛⠛⠿⠿⣷⣶⣦⣤⣄⠀⠀⠀⠀⢹⣿⡀⠀⠀
⠀⣽⡯⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠟⠋⠉⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⠀⣠⣴⣦⣄⠀⠀⠀⠀⣀⣉⠙⠻⢿⣶⣤⡀⠀⢻⣷⡀⠀
⠀⣿⡇⠀⠀⠀⠀⢀⣤⣾⠿⠛⠉⠀⣀⣀⣀⠀⠀⠀⣠⣾⣿⣿⣿⣶⣤⣴⣿⣿⣿⣿⣿⣷⣄⣤⣾⣿⣿⡅⠀⠀⠈⠙⠿⣷⣦⣿⣧⠀
⢨⣿⠅⠀⠀⣠⣴⡿⠏⠁⠀⠀⢀⣴⣿⣿⣿⣷⣶⣾⣿⣿⡿⠿⠟⠟⠟⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⢀⣠⣄⠀⠀⠙⢿⣿⠇
⢸⣿⠀⣀⣾⠿⠉⣀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⢿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣷⠀⢠⣾⣿⠁
⢸⣿⣰⣿⠋⠀⣼⣿⣿⣦⣤⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⡀⣀⢀⢀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⠃⠀
⢸⣿⣿⣧⣄⠠⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⢀⣠⣴⣾⡾⠿⠟⠟⠟⠿⠿⠿⣷⣶⣤⡀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀
⠀⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⢀⣴⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠟⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀
⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⢠⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠸⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀
⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⡯⠀⠠⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠿⠀⠀⠀⠀⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣷⠀⢸⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣄⠀⠀⢀⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⡄⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡀⠀⣰⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣮⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⣤⡿⠋⢻⣿⣇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⠏⠉⢻⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣏⠀⠀⠘⣿⣿⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣼⣿⡿⠃⠀⠀⠀⣼⡿⠀⠀⢀⣠⣤⣶⣾⣾⣾⣶⣶⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣤⣤⣤⣽⣿⣇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⡟⠁⣠⣤⣴⣴⣿⠇⢠⣶⣿⣿⢿⣿⣿⠿⠻⠻⠿⣿⣿⣿⣿⣾⣶⣶⣶⣶⣶⣶⣿⣿⡍⠉⠀⢻⣿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠐⢿⣷⠀⠉⠉⠉⣼⡿⣱⣿⡿⠋⠀⠘⣿⡇⠀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⣸⣿⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⠀⠀⠀⠹⣿⣿⣿⡇⠀⠀⠀⢻⣿⡄⠀⠀⠀⠀⠀⠀⢀⣿⡟⠉⢱⣿⠟⠛⠁⠀⠀⠀⠀⣾⡗⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷⡀⠀⠀⠀⠀⠈⣻⡧⠀⠀⠀⢰⣿⣿⣦⠀⠀⠀⠀⢠⣾⡟⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⢰⣿⠃⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣧⠀⠀⠀⠀⠀⢺⣿⠀⠀⠀⣽⡯⠘⢿⣷⡄⣀⣴⣿⣏⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⣿⡏⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⠀⠀⠀⠀⢸⣿⠀⠀⠀⣿⡇⠀⠀⠻⣿⣿⠟⠹⣿⡀⠀⠀⣽⡯⠀⠀⠀⠀⠀⣸⣿⠁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡀⠀⠀⠀⢘⣿⡂⠀⢰⣿⠃⠀⠀⠀⠉⡀⡀⡈⣿⣇⠀⠀⣿⣇⣀⣀⣀⣄⣰⣿⣇⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⣷⢠⣴⣴⣶⣿⡇⠀⢸⣿⡷⡿⠿⠿⠿⠿⠿⠻⢻⣿⡀⠀⣿⣟⠛⠛⠛⠛⠛⠙⠙⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠈⠈⢿⣇⠀⣸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣷⣤⣼⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠿⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
};
const playerAdventureSprit_defoltEvent = {
  //0 :실패 나머지 아이템 데이터 참조
  0: `
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠀⠀⠀⠀⠀⠀⣠⣤⣤⣀⣀⣀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠞⠋⣠⠀⠀⠀⠀⠀⢸⣷⢶⡶⠲⠾⢭⣝⠳⢦⡀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠮⣝⣳⠶⠶⠾⣿⣾⠃⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣷⡀⢠⡟⣧⠀⠀⠀⠉⠉⠉⠋⠁⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⠶⢋⣽⣧⢤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⢳⣼⡃⠈⠳⣆⠀⠀⠀⠀⠀⠀⠀⠀⣲⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠟⠋⠁⠀⠀⠀⠀⠀⠀⢼⣟⣁⠀⠀⠀⠀⠀⠀⠀⢨⣷⡄⠈⢧⡀⠀⠘⣧⣀⣤⠴⠞⢻⡆⠀⠟⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠶⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠳⢦⡀⠀⠀⠀⠀⠀⠳⣄⣀⢈⣹⠆⣐⣯⣅⠁⠀⣸⡏⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⢀⡴⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠳⢦⡀⠀⠀⠈⠹⣆⠀⠀⠀⠀⢀⣬⡽⢿⡭⠾⢯⣉⣁⣶⠞⠋⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⣼⠋⠀⠀⠀⢀⣠⣶⠆⠀⢺⡄⠀⠀⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠘⣇⠀⠀⠀⠈⠳⠚⠉⠀⠀⠀⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠸⣆⠈⠛⠛⠋⢹⡏⠀⠀⢸⠟⠶⣄⣄⣀⣀⣀⡀⢽⡀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠘⠷⣄⣀⡀⣿⠀⠀⢀⡟⠀⠀⠀⠈⠉⠉⠉⠙⠋⠛⢦⡀⠀⠀⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⢸⡏⠁⣿⠀⠀⢸⣷⢦⣄⣤⠴⠀⠀⢀⡀⠀⢀⡀⣽⢦⢀⡾⢉⣳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠈⣧⢀⡯⠀⠀⣿⣾⠀⠀⠀⠀⣤⣆⠈⠉⠛⠉⣿⣧⡾⠟⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠹⣖⡇⠀⢸⡃⠀⠀⠀⠀⠚⠁⠘⠀⠀⠀⠀⣻⡿⣅⠀⠀⠀⠀⠀⠀⢀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⢀⡽⣗⢠⡿⠶⢤⣤⣀⣀⣀⣀⣄⣠⡤⠶⠚⠉⣴⠋⠀⠀⠀⠀⠀⣤⣾⣅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⢼⠃⢿⡾⠀⠀⠀⠀⠈⠉⠉⠁⠁⠀⠀⠀⠀⢈⣳⠀⠀⠀⠀⠀⠈⣿⠿⠿⠖⠗⢲⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣎⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡴⠶⠋⠉⠳⠶⣄⠀⠀⣸⠇⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣷⣶⣶⣶⣶⣶⣴⣶⠚⠋⣽⡆⣠⣦⠀⡀⠀⠈⠛⣦⣯⠆⠀⠀⠀⠀⠀⠸⡆⠀⣀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⠿⠛⠛⠋⠁⠁⠀⠀⠈⢙⣟⣿⠟⠻⣦⣼⡟⢀⣤⠞⠋⠀⠀⠀⠀⠀⠀⠀⣀⣿⠞⣻⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣉⣸⡧⠞⠋⠈⠉⠉⠳⣆⠀⠀⠀⠀⠀⠀⠀⢰⡏⢀⣠⠏⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣫⠇⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠈⠛⢛⡇⠀⠀⠀⠀⠀⠀⠀⠀
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠛⢷⣄⢀⣴⣾⣶⣦⠀⠀⠀⠙⢷⣀⠀⠀⠀⠀⠀⠨⡇⠀⠀⠀⠀⠀⠀⠀⠀
`,
  1: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣶⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠈⠻⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⣿⠁⠀⠀⠙⢿⣷⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡿⠀⠀⠀⠀⠈⠹⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠈⠻⣿⣧⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣧⡀⠀⠀⠀⠀⠀⠀⢿⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⡄⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⡀⠀⠀⠀⢰⣿⣟⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⣿⡂⠀⠀⠀⢿⡿⠿⣿⣿⣶⣦⣄⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠀⣠⣄⠀⠀⠀⠀⠀⠈⠙⠛⢿⣿⣆⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⢁⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⠏⣠⣿⡿⠋⠀⠀⠈⠀⠀⠀⠀⠀⠉⠙⠛⠋⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣼⣿⠟⢁⣼⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⠟⠁⣰⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣾⡿⠟⠁⣠⣾⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡿⠋⠀⣠⣾⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⠿⠋⠀⣠⣼⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣠⣾⣿⡿⠟⠋⠁⢀⣴⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣰⣿⡿⠋⠁⠀⠀⣠⣶⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢨⣿⡟⠀⠀⣠⣴⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠸⣿⣧⣴⣾⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠻⠿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
  2: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⠶⠾⠶⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠏⢁⣿⠃⠀⠀⠀⠙⢷⣆⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⠿⢿⣟⠻⠿⣦⣄⠀⠀⠀⠀⠻⣧⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡾⠿⠻⠿⢿⣧⡶⠿⣗⠀⢀⣿⠛⢿⣷⠷⠷⠆⠹⣷⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⡃⠀⠀⣠⡿⠁⠀⠈⢹⣧⢘⣟⠀⠀⠻⡧⠀⠀⠀⠹⣧⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠄⠀⢠⡿⠁⠀⠀⠀⠀⠹⣿⡃⠀⢀⣶⠰⡆⠀⠀⠀⢻⣧⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣼⣿⠂⢠⣿⢧⣦⣴⣤⣄⣀⠀⠉⠿⣦⣼⡏⠀⠀⠀⠺⢶⢾⢿⣆⠀
⠀⠀⠀⠀⠀⠀⣠⣴⠶⠟⠇⠀⠀⠡⣿⢡⣾⠃⠈⠈⠀⠈⠉⠛⠷⣧⣦⣈⠙⠻⢾⣴⣄⣄⠀⠀⠈⣿⡀
⠀⠀⠀⠀⣰⡾⠋⠂⠀⠀⠀⠀⠰⣮⢿⣿⢷⢾⠾⠀⠀⠀⠀⠀⠀⠀⠈⠹⢷⡄⠀⠀⠉⠙⠻⠳⠷⠻⠃
⠀⠀⢀⣼⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣦⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣼⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣧⠀⠀⠀⠀⠀⠀⠀
⠀⣼⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡆⠀⠀⠀⠀⠀⠀
⢠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣷⠀⠀⠀⠀⠀⠀
⣸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣻⠅⠀⠀⠀⠀⠀
⣺⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡃⠀⠀⠀⠀⠀
⢺⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠅⠀⠀⠀⠀⠀
⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣟⠁⠀⠀⠀⠀⠀
⠘⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠃⠀⠀⠀⠀⠀⠀
⠀⠹⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠋⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠛⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠻⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠛⠿⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣴⡾⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠿⠷⠶⠶⠶⠾⠿⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
  3: `

⠀⠀⠀⠀⠀⠀⢀⣠⣤⣴⣶⣶⣶⣶⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣠⣶⡿⠟⠛⠉⠁⠀⠀⠀⠈⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢀⣾⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠈⣿⡆⠀⠀⠀⠀⠀⠀⢀⣠⣤⣦⣶⣾⢿⢷⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢹⣷⣀⣀⠀⣤⣤⠀⠈⠛⠉⠁⠀⣴⡄⠀⣹⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣠⣿⠿⠛⠀⠉⠁⠀⠀⢀⣠⣤⣶⡦⠀⢀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⣿⠃⠙⠿⠀⣤⣤⣶⣿⣿⣿⣿⡅⠀⢴⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠈⢿⣧⡀⠀⠀⢉⣉⠹⣿⣿⣿⣿⣷⣆⠈⢿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠈⠙⠻⠿⠿⠿⢿⣆⢿⣿⣿⣿⣿⣿⡄⠘⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢸⣿⡈⣿⣿⣿⣿⣿⣷⠀⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣻⣧⠸⣿⣿⣿⣿⣿⣧⠘⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⡆⢻⣿⣿⣿⣿⣿⡇⠘⢿⣶⣶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⡌⢿⣿⣿⣿⣿⣿⠀⠀⢸⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡘⣿⣿⣿⣿⣿⣷⠀⠈⢿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣻⣧⢻⣿⣿⣿⣿⣿⣷⣄⠀⠉⠻⣷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⢀⣾⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠈⠻⣷⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠏⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣄⠀⠈⠹⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣿⠏⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠛⢿⣦⣀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣾⡟⠀⣾⣿⣿⡿⠟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠿⣷⣤⡀⠙⠻⣷⣦⣀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣾⠟⢀⣾⡟⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣶⣤⡀⠙⠻⣷⣤⠀
⠀⠀⠀⠀⢠⣿⠏⠀⣾⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣶⣶⣶⢿⠿⠿⢂⣀⣬⣿⡇
⠀⠀⠀⢠⣿⠏⠀⣼⡿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣴⣶⢿⠟⠟⠛⠉⢁⣀⣤⣴⣶⠿⠟⠛⠋⠁⠀
⠀⠀⢠⣿⠏⠀⣼⡿⠁⠀⣀⣀⣤⣤⣶⣶⡿⠿⠛⠋⠉⣁⣠⣠⣤⣶⣾⠿⠟⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀
⠀⢠⣾⠏⠀⣾⣿⡷⡿⠿⠛⠛⠋⠉⡈⣀⣤⣤⣶⣾⠿⠟⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⣿⠏⠀⠀⢀⢁⣀⣠⣤⣶⣶⡿⠿⠟⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠈⠻⠿⠿⠿⠿⠟⠛⠋⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

`,
};
const playerAdventureSprit_AM = {
  // 오전 이미지
  1: `
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⡴⠖⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⠶⢤⣤⣠⣠⣤⠤⠶⠖⠞⠋⣡⠟⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⢀⡾⠁⠀⠀⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⣴⠶⣆⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀⠀
      ⠀⣠⠟⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⢀⡾⠁⠀⠘⢧⠀⠀⠀⠀⠀⢀⡴⠏⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⢀⡼⠃⠹⢦⡀⠀⠀
      ⡴⠋⠀⠀⠀⠀⠀⠀⠀⠹⡆⢠⣦⣀⠀⠛⠀⠀⠀⠀⢈⣣⠀⠀⠀⢠⠞⠁⠀⣠⡴⠛⢷⠀⠀⠘⣇⠀⠀⠀⠀⢀⡾⠁⠀⠀⠈⠳⣄⠀
      ⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⡉⠳⢦⣀⠀⠀⢠⡞⠿⠖⠲⠶⣆⣠⣴⠛⠁⣰⠆⢹⠀⠀⠀⢸⡆⠀⠀⣠⠟⠀⠀⠀⠀⠀⠀⠙⢦
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⠻⣄⠀⠉⠻⠷⠋⠀⠀⠀⠀⠀⠈⠁⠉⠛⢶⡋⢀⡟⠀⠀⠀⠀⢷⣀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠈
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠈⠳⣦⢤⡀⠀⠀⠀⠈⠻⣄⠀⠀⠀⠀⠀⢹⡟⠁⠀⠀⠀⠀⠀⢻⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣳⠆⢰⡇⠸⣇⠀⠀⣀⠰⠆⠸⣇⣖⣠⣀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⡀⠀⠀⠀⠀⠀⢀⡄⠀⠀⠀⣾⠀⡿⠀⠀⠈⢷⣾⣽⣷⣦⣴⠏⣹⢳⣿⣆⠀⢹⠀⠀⠀⠀⢺⠶⣄⣀⣹⠄⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⢸⣧⠴⠳⣆⠀⢰⡇⠀⠀⠀⠀⢻⢀⡏⠀⠀⠀⣿⡃⣾⣿⣷⠀⠀⣿⢸⣿⡟⣷⣼⠁⠀⠀⠀⠀⠀⠈⢉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠈⠁⠀⠀⠈⠻⠺⠂⠀⠀⠀⠀⠸⣇⡇⠀⠀⢀⡿⢥⣽⣿⠟⠀⢀⠀⠛⠛⠛⢿⡁⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⠀⠀⢸⠇⠀⠀⠀⠀⠰⠛⠃⠀⢀⣠⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⢸⡆⠀⣾⢥⣄⣀⣀⣠⣠⡴⠶⠚⠋⠁⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⡛⠶⣄⡀⠀⢾⣻⣰⠇⠀⠀⠈⠉⠈⠀⠀⠀⠀⠀⠀⣼⢧⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡂⠀⠀⠙⠷⣌⣿⣿⣧⣀⣀⡀⡀⠀⠀⣠⡖⠚⣞⠛⠁⠀⠙⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠹⡆⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠅⠀⠀⠀⠀⠈⢻⡿⣿⡛⠋⠉⢁⣠⠞⠻⢾⣿⣥⣤⡄⠀⠀⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀
      ⠀⢲⡄⠀⠀⠀⠀⣠⠄⣼⠁⠀⠀⠀⠀⣰⠟⠀⠈⠙⠓⠶⠛⠁⠀⢰⣾⡿⠿⣿⣴⡤⣠⡾⢧⡀⠀⠀⠀⠀⠀⠰⠶⢤⣤⠷⠀⠀⠀⠀
      ⠀⠀⠹⢦⣀⣀⡴⠏⠀⣿⠀⠀⠀⠀⠀⢯⡀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣽⣧⡴⠞⠛⠿⢯⡀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠉⠉⠀⠀⠀⣿⠀⠀⠀⠀⠀⠈⡽⠶⢦⣄⣀⣠⣆⣀⣠⡬⠿⠇⠀⠀⠀⠀⠀⠹⣆⠀⠈⠳⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡀⠀⠀⠀⢀⡼⠃⠀⠀⢼⠉⠁⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠈⠙⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⠀⠀⢀⡾⠁⠀⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⢀⡼⠃⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣤⡟⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣤⠶⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀
      `,
  2: `
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠃⠰⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⣀⣀⣄⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣴⠏⠀⠀⢀⡈⠳⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠚⠁⠁⢱⡆⠀⠁⣿⠳⢦⣀⡀⠀⠀⠀
   ⠀⠀⠀⣀⣠⠴⣶⠒⠛⠉⠁⠈⠈⢳⡄⠀⠀⠹⣦⣤⣽⠟⠶⢦⣤⡤⠴⠴⢤⢤⡤⡤⠆⠈⠹⡴⠖⠛⡿⠀⠀⣴⢿⣠⣠⣬⣽⣶⡶⠶
   ⢀⠴⠚⠉⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⢷⡀⠀⠀⢸⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠶⠋⠛⣧⠀⠀⠀⠀⠀⠀
   ⠉⠒⠾⠲⢷⠺⠃⠀⠀⠀⠀⢰⣤⣀⠀⠻⢦⣀⣽⠀⠀⣄⠀⠀⠀⠀⠀⠀⠀⣠⡴⠛⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⣶⣄⠀⠀
   ⠀⠀⠀⠀⢸⡂⠀⠀⠀⠀⠀⣽⠀⡉⠳⢦⣀⠈⠁⢠⡞⠿⠖⠲⠶⢆⣠⣴⠛⠁⣰⠆⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢀⡗⠸⣆⠀
   ⠀⠀⠀⠀⢹⠆⠀⠀⠀⠀⠀⢻⡀⠻⣄⠀⠉⠻⠷⠋⠀⠀⠀⠀⠀⠈⠉⠉⠛⢶⡋⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⡼⠁⠀⢹⡄
   ⠀⠀⠀⠀⢼⠅⠀⠀⠀⠀⠀⠘⢧⡀⠈⠳⣦⢤⡀⠀⠀⠀⠈⠻⣄⠀⠀⠀⠀⠀⢹⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢸⠃⠀⠀⠀⣗
   ⠀⠀⠀⠀⢼⠀⠀⠀⠀⠀⠀⠀⠈⣳⠆⢰⡇⠸⣇⠀⠀⣀⠰⠆⠸⣇⣖⣠⣀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠸⣆⠀⠀⣠⡇
   ⠀⠀⠀⠀⢽⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⡿⠀⠀⠈⢷⣾⣽⣷⣦⣴⠏⣹⢳⣿⣆⠀⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢹⠷⢲⡏⠀
   ⠀⠀⠀⠀⣽⠀⠀⠀⠀⠀⠀⠀⠀⢻⢀⡏⠀⠀⠀⣿⡃⣾⣿⣷⠀⠀⣿⢸⣿⡟⣷⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠸⡿⢿⡏⠀
   ⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡇⠀⠀⢀⡿⢥⣽⣿⠟⠀⢀⠀⠛⠛⠛⢿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢈⡇⢸⡇⠀
   ⠀⠀⠀⠀⣽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⠀⠀⢸⠇⠀⠀⠀⠀⠰⠛⠃⠀⢀⣠⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⣧⣸⡇⠀
    ⠀⠀⠀⣺⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⢸⡆⠀⣾⢥⣄⣀⣀⣠⣠⡴⠶⠚⠋⠁⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠈⠈⠁⠀
   ⠀⠀⠀⠀⢺⠀⠀⠀⠀⢹⡛⠶⣄⡀⠀⢾⣻⣰⡇⠀⠀⠈⠉⠈⠀⠀⠀⠀⠀⠀⣼⢧⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣯⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢹⡂⠀⠀⠀⢸⠆⠀⠈⠙⠳⣌⣿⣿⣦⣀⣀⡀⡀⠀⠀⣠⡖⠚⣞⠛⠁⠀⠙⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⡷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢹⡆⠀⠀⠀⢸⠇⠀⠀⠀⠀⠈⢻⡿⣿⡛⠋⠉⢁⣠⠞⠻⢾⣿⣥⣤⡄⠀⠀⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⣯⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⡇⠀⠀⠀⣽⠀⠀⠀⠀⠀⣰⠟⠀⠈⠙⠓⠶⠛⠁⠀⢰⣾⡿⠿⣿⣴⡤⣠⡾⢧⡀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⡃⠀⢀⡀⣿⠀⠀⠀⠀⠀⢯⡀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣽⣧⡴⠞⠛⠿⢯⡀⠈⠳⣄⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⡃⢀⡾⠹⣾⠀⠀⠀⠀⠀⠈⡽⠶⢦⣄⣀⣠⣆⣀⣠⡬⠿⠇⠀⠀⠀⠀⠀⠹⣆⠀⠈⠳⣆⡀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⣇⡼⠁⠀⢺⡀⠀⠀⠀⢀⡼⠃⠀⠀⢼⠉⠁⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠈⠙⢶⣄⠀⡯⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⣎⢷⡀⠀⠘⢧⠀⠀⢀⡾⠁⠀⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⢀⡼⠃⣟⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢼⡏⠛⣧⠀⠀⠈⢳⣤⡟⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣤⠶⠋⠀⠀⣿⠀⠀⠀⠀⠀⠀  
    `,
};
const playerAdventureSprit_PM = {
  // 오후 이미지
  1: `
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠀⠸⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠀⠀⠀⠀⠉⠳⠶⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⠦⣄⣀⣀⣀⣄⡴⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⡴⠖⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠈⠀⠀⠀⠀⠀⣰⠏⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⢀⡾⠁⠀⠀⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⣴⠶⣆⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡀⠀⠀⠀⠀
      ⠀⣠⠟⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⢀⡾⠁⠀⠘⢧⠀⠀⠀⠀⠀⢀⡴⠏⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⢀⡼⠃⠹⢦⡀⠀⠀
      ⡴⠋⠀⠀⠀⠀⠀⠀⠀⠹⡆⢠⣦⣀⠀⠛⠀⠀⠀⠀⢈⣣⠀⠀⠀⢠⠞⠁⠀⣀⡴⠛⣷⠀⠀⠘⣇⠀⠀⠀⠀⢀⡞⠁⠀⠀⠈⠳⣄⠀
      ⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⡉⠳⢦⣀⠀⠀⢠⡞⠿⠖⠲⠶⣆⣠⣴⠛⠉⣰⠄⣸⠀⠀⠀⢸⡆⠀⠀⣠⠟⠀⠀⠀⠀⠀⠀⠙⢦
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⠻⣄⠀⠉⠻⠷⠋⠀⠀⠀⠀⠀⠈⠈⠉⠛⢶⡋⢠⡞⠀⠀⠀⠀⢷⣀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠈
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠈⠳⣦⢤⡀⠀⠀⠀⠈⠻⣄⠀⠀⠀⠀⠀⢹⡞⠁⠀⠀⠀⠀⠀⢻⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣳⠆⢰⡇⠸⣇⠀⠀⠀⠀⠀⠸⣇⣖⣠⣀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⡀⠀⠀⠀⠀⠀⢀⡄⠀⠀⠀⣾⠀⡿⠀⠀⠈⢷⣤⣀⣴⣶⣴⠏⣹⢳⣿⣆⠀⢹⠀⠀⠀⠀⢺⠶⣄⣀⣹⠄⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⢸⣧⠴⠳⣆⠀⢰⡇⠀⠀⠀⠀⢻⢀⡏⠀⠀⠀⣿⣷⣯⣷⡯⡆⠀⣿⢸⣿⡟⣷⣼⠁⠀⠀⠀⠀⠀⠈⢉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠈⠁⠀⠀⠈⠻⠺⠂⠀⠀⠀⠀⠸⣇⡇⠀⠀⢀⡟⠀⠀⠀⠀⠀⢀⠀⠛⠛⠛⢿⡁⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⠀⠀⢸⠇⠀⠀⠀⠀⠰⠛⠃⠀⢀⣠⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⢸⡆⠀⣾⢥⣄⣀⣀⣠⣠⡴⠶⠚⠋⠁⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⡛⠶⣄⡀⠀⢾⣻⣰⠇⠀⠀⠈⠉⠈⠀⠀⠀⠀⠀⠀⣼⢧⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡂⠀⠀⠙⠷⣌⣿⣿⣧⣀⣀⡀⡀⠀⠀⣠⡖⠚⣞⠛⠁⠀⠙⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠹⡆⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠅⠀⠀⠀⠀⠈⢻⡿⣿⡛⠋⠉⢁⣠⠞⠻⢾⣿⣥⣤⡄⠀⠀⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀
      ⠀⢲⡄⠀⠀⠀⠀⣠⠄⣼⠁⠀⠀⠀⠀⣰⠟⠀⠈⠙⠓⠶⠛⠁⠀⢰⣾⡿⠿⣿⣴⡤⣠⡾⢧⡀⠀⠀⠀⠀⠀⠰⠶⢤⣤⠷⠀⠀⠀⠀
      ⠀⠀⠹⢦⣀⣀⡴⠏⠀⣿⠀⠀⠀⠀⠀⢯⡀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣽⣧⡴⠞⠛⠿⢯⡀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠉⠉⠀⠀⠀⣿⠀⠀⠀⠀⠀⠈⡽⠶⢦⣄⣀⣠⣆⣀⣠⡬⠿⠇⠀⠀⠀⠀⠀⠹⣆⠀⠈⠳⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡀⠀⠀⠀⢀⡼⠃⠀⠀⢼⠉⠁⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠈⠙⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⠀⠀⢀⡾⠁⠀⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⢀⡼⠃⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣤⡟⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣤⠶⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀
      `,
  2: `
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡼⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠃⠰⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⣀⣀⣄⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣴⠏⠀⠀⢀⡈⠳⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠚⠁⠁⢱⡆⠀⠁⣿⠳⢦⣀⡀⠀⠀⠀
   ⠀⠀⠀⣀⣠⠴⣶⠒⠛⠉⠁⠈⠈⢳⡄⠀⠀⠹⣦⣤⣽⠟⠶⢦⣤⡤⠴⠴⢤⢤⡤⡤⠆⠈⠹⡴⠖⠛⡿⠀⠀⣴⢿⣠⣠⣬⣽⣶⡶⠶
   ⢀⠴⠚⠉⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⢷⡀⠀⠀⢸⠆⠀⠀⣾⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠦⠶⠋⠛⣧⠀⠀⠀⠀⠀⠀
   ⠉⠒⠾⠲⢷⠺⠃⠀⠀⠀⠀⢰⣤⣀⠀⠻⢦⣀⣽⠀⠀⣄⠹⡟⠀⠀⠀⠀⠀⣠⡴⠛⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⣶⣄⠀⠀
   ⠀⠀⠀⠀⢸⡂⠀⠀⠀⠀⠀⣽⠀⡉⠳⢦⣀⠈⠁⢠⡞⠿⠖⠳⠶⢆⣠⣴⠛⠁⣰⠆⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢀⡗⠸⣆⠀
   ⠀⠀⠀⠀⢹⠆⠀⠀⠀⠀⠀⢻⡀⠻⣄⠀⠉⠻⠷⠋⠀⠀⠀⠀⠀⠈⠉⠉⠛⢶⡋⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⡼⠁⠀⢹⡄
   ⠀⠀⠀⠀⢼⠅⠀⠀⠀⠀⠀⠘⢧⡀⠈⠳⣦⢤⡀⠀⠀⠀⠈⠻⣄⠀⠀⠀⠀⠀⢹⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢸⠃⠀⠀⠀⣗
   ⠀⠀⠀⠀⢼⠀⠀⠀⠀⠀⠀⠀⠈⣳⠆⢰⡇⠸⣇⠀⠀⠀⠀⠀⠸⣧⣀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⣿⠸⣆⠀⠀⣠⡇
   ⠀⠀⠀⠀⢽⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⡿⠀⠀⠈⢷⣤⣠⣴⣤⣴⠯⠟⢻⣶⣄⠀⢹⠀⠀⠀⠀⠀⢈⣄⠀⠀⠀⠀⣿⠀⢹⠷⢲⡏⠀
   ⠀⠀⠀⠀⣽⠀⠀⠀⠀⠀⠀⠀⠀⢻⢀⡏⠀⠀⠀⣿⠙⠳⢲⣮⠀⠀⠾⣏⣀⠙⢷⣼⠁⠀⠀⠀⠀⢼⡿⠀⠀⠀⠀⣿⠀⠸⡿⢿⡏⠀
   ⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡇⠀⠀⢀⡏⢤⠞⠋⠁⠀⢀⠀⠈⠉⠃⢹⡁⠀⠀⠀⠀⠀⠘⠃⠀⠀⠀⠀⣿⠀⢈⡇⢸⡇⠀
   ⠀⠀⠀⠀⣽⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⠀⠀⢸⠇⠀⠀⠀⠀⠰⠛⠃⠀⢀⣠⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⣧⣸⡇⠀
   ⠀⠀⠀⠀⣺⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⢸⡆⠀⣾⢥⣄⣀⣀⣄⣤⠴⠶⠚⠋⠁⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠈⠈⠁⠀
   ⠀⠀⠀⠀⢺⠀⠀⠀⠀⢹⡛⠶⣄⡀⠀⢾⣻⣰⡇⠀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⣼⢧⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣯⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢹⡂⠀⠀⠀⢸⠆⠀⠈⠙⠳⣌⣿⣿⣦⣀⣀⡀⡀⠀⠀⣠⡞⠒⣗⠛⠁⠀⠙⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⡷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢹⡆⠀⠀⠀⢸⠇⠀⠀⠀⠀⠈⢻⡿⣿⡛⠋⠉⢁⣠⠞⠻⢾⣿⣥⣤⡄⠀⠀⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⣯⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⡇⠀⠀⠀⣽⠀⠀⠀⠀⠀⣰⠟⠀⠈⠙⠓⠶⠛⠁⠀⢰⣾⡿⠿⣿⣴⡤⣠⡾⢧⡀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⡃⠀⢀⡀⣿⠀⠀⠀⠀⠀⢯⡀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣽⣧⡴⠞⠛⠿⢯⡀⠈⠳⣄⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⡃⢀⡾⠹⣾⠀⠀⠀⠀⠀⠈⡽⠶⢦⣄⣀⣠⣆⣀⣠⡬⠿⠇⠀⠀⠀⠀⠀⠹⣆⠀⠈⠳⣆⡀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⣇⡼⠁⠀⢺⡀⠀⠀⠀⢀⡼⠃⠀⠀⢼⠉⠁⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠈⠙⢶⣄⠀⡯⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢸⣎⢷⡀⠀⠘⢧⠀⠀⢀⡾⠁⠀⠀⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⢀⡼⠃⣟⠀⠀⠀⠀⠀⠀
   ⠀⠀⠀⠀⢼⡏⠛⣧⠀⠀⠈⢳⣤⡟⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣤⠶⠋⠀⠀⣿⠀⠀⠀⠀⠀⠀
    `,
};
let checkInventoryChange = false; //변경후 체크용도
let playerInventory_Status = 0; //기본 상태 : 0 그냥 확인용도 1 : 판매 2 : 교체 ;
let playerInventory = {
  // 인벤토리
  //플레이어 인벤토리
  0: [0, 0],
  1: [0, 0],
  2: [0, 0],
  3: [0, 0],
  4: [0, 0],
  5: [0, 0],
};
const stageName = {
  // 스테이지 스텍에 비례한 이름 받아오는 객체
  1: ' 뒷산 ',
  2: ' 뒷산 동굴 ',
  3: ' 동굴안 호수 ',
};
const dayName = {
  //오전 오후 그런거 적어둔곳
  1: ' 오전 ',
  2: ' 오후 ',
  3: ' 밤 ',
};
const itemData = {
  //인덱스 : 가격, 이름, 내용, 효과
  0: [
    //기본값
    0,
    '비어 있습니다.',
    '당신은 더 많은 돈을 원합니다. 어서 가방을 채워주세요. ',
    null,
  ],
  1: [50, '초록 허브', '초록 색깔의 허브입니다. 약제조에 사용됩니다.', null], //stage 1드랍템
  2: [
    100,
    '황금 사과',
    '황금색 사과입니다. 실제 황금은 아닙니다. 약제조에 사용됩니다.',
    null,
  ],
  3: [
    500,
    '마녀의 혼합물',
    '정체 모를 혼합물입니다. 귀한 재료로 약제조에 사용됩니다.',
    null,
  ],
  4: [
    //stage 2 드랍템
    200,
    '흔한 광석',
    '정말 흔한 광석입니다. 그러나 생각보다 비싼 가격에 거래됩니다.',
    null,
  ],
  5: [
    1000,
    '은 광석',
    '귀한 광석입니다. 그러나 쓸모는 없는 거 같습니다.',
    null,
  ],
  6: [
    // stage 3 드랍템
    500,
    '맑은 호수물',
    '동굴속 호수에는 다양한 성분이 들어가 있어서 약제조에 사용됩니다.',
    null,
  ],
  7: [
    1200,
    '보석 물고기',
    '반짝이는 몸이 아름다운 물고기입니다. 약 제조에 사용됩니다. ',
    null,
  ],
};

class Dice {
  constructor() {
    this._luck = 0;
    this._str = 0;
    this._dex = 0;
  }
  random() {
    function randomTemp(value) {
      let index = 0; //반복 확인 값
      while (value > 0) {
        let temp = parseInt(Math.random() * value);
        switch (index) {
          case 0: //럭 증가
            this._luck += temp;
            value -= temp;
            break;
          case 1: // 힘 증가
            this._str += temp;
            value -= temp;
            break;
          case 2: // 덱 증가
            this._dex += value;
            value -= value;
            break;
        }
        index++;
      }
    }
    this._luck = 0;
    this._str = 0;
    this._dex = 0;

    let statsPoint = 0; //스텟 기본값

    if (randomMaker(10)) {
      statsPoint += 15;
      randomTemp.call(this, statsPoint);
    } else {
      statsPoint += 10;
      randomTemp.call(this, statsPoint);
    }
  }
}

class Player {
  constructor() {
    this._hp = 100; //max hp입니다.
    this._hpPercent = 1;
    this._level = 1;
    this._exp = 0;
    this._levelUpExp = 100; //레벨업에 필요한 경험치량
    this._atck = 1;
    this._luck = 0;
    this._str = 0;
    this._dex = 0;
    this._playerSkillPoint = 0; //스킬 포인트
    this.dotSprit = {
      atck: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣦⣀⠀⠀⠀⠀⠀⠀⢀⣠⠀⠀⠀⠀⠀  ⠀⠀⣀⡴⠞⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⡉⠳⢦⣀⠀⠀⢠⡞⠿⠖⠲⠶⢆⣠⣴⠛⠉⣰⠄⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⠻⣄⠀⠉⠻⠷⠋⠀⠀⠀⠀⠀⠈⠉⠈⠛⢶⡋⢠⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⣀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠈⠳⣦⢤⡀⠀⠀⠀⠈⠻⣄⠀⠀⠀⠀⠀⢹⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⠖⠛⠛⢹⣿⡗⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⠆⢰⡇⠸⣇⠀⠀⣀⠰⠆⠸⣇⣖⣠⣀⠀⠀⣯⠀⠀⠀⠀⠀⠀⠀⠀⣸⠇⠀⣀⣤⣶⡿⢿⣿⡄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⡿⠀⠀⠈⢷⣾⣽⣷⣦⣴⠏⣹⢳⣿⣆⠀⢹⠀⠀⢀⡀⠀⠀⠀⢠⡏⢀⡴⠋⢉⣹⣅⠘⣿⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⢀⡏⠀⠀⠀⣿⡃⣾⣿⣷⠀⠀⣿⢸⣿⡟⣷⣼⠁⠀⢸⡋⠳⣆⢀⡟⣠⡟⣴⠛⠛⠿⠿⣿⣿⠃
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡧⠀⠀⢀⡿⢥⣽⣿⠟⠀⢀⠀⠛⠛⠛⢿⡁⠀⠀⠀⠙⠳⢿⣿⣿⣿⢹⡃⠀⠀⠀⠀⣼⠇⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣷⠀⠀⢸⠇⠀⠀⠀⠀⠰⠛⠃⠀⢀⣠⣞⠁⠀⠀⠀⠀⢰⣿⣿⡿⠋⠀⠹⡶⠶⠖⠛⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⢸⡆⠀⣾⢥⣄⣀⣀⣠⣠⡴⠶⠚⠋⠁⢹⡆⠀⠀⠀⠀⣸⣿⣿⡧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡛⠶⣄⡀⠀⢾⣻⣰⡇⠀⠀⠈⠉⠈⠀⠀⣀⠀⠀⠀⣼⣇⠀⠀⠀⢰⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡂⠀⠀⠙⠷⣌⣿⣿⣦⣀⣀⡀⠀⠀⠐⣺⣿⣓⣗⠛⠁⠘⢧⡀⢀⣾⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠆⠀⠀⠀⢀⡾⠻⠿⣿⡛⠋⠉⢁⣰⣾⣿⠟⣯⢋⡁⠀⠀⢀⣿⣼⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠀⠀⠀⢀⡼⠁⠀⠀⠈⠙⠓⠶⠛⢡⣄⣼⡷⠿⣿⣏⣠⣴⠛⣸⣿⡟⠙⢲⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠺⣅⣀⠀⠀⠀⢠⣄⠀⠀⠙⢻⡏⠀⠀⠈⠋⠉⠉⠛⠛⠿⢦⣰⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠈⠉⠳⠶⡶⠻⢽⡚⠖⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⣠⠶⣻⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⡀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠈⠹⢦⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⢋⡼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠀⠀⠙⠷⣄⠀⠀⠀⣠⣾⣿⣯⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣄⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠈⠛⠖⠟⢹⣿⡏⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
      hit: `
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⡀⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢰⠟⢾⡆⠀⠀⠀⠀ ⢀⣶⣶⣂⣀⡀⠀⠀⢀⣀⡤⠶⠛⠉⢸⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡿⢀⡌⠙⢶⣶⠘⢀⡞⠙⠉⠁⠉⠙⠚⠚⠻⢧⣄⣠⠾⠁⣽⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣿⠀⠹⣆⡀⠘⠻⡏⠁⠀⠀⢠⣀⠀⠀⠀⠀⠀⠈⢻⣄⡼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠘⠻⠶⢤⡀⠀⠀⠀⠀⠉⢳⡄⠀⠀⠀⠀⠈⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⢷⡆⠀⢠⡟⢧⡀⠀⠀⠀⠀⠀⣿⠓⣶⣤⣀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⢀⡾⠀⠈⢙⣷⣶⣶⣛⠛⠃⣼⡋⠈⢿⡻⣦⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⢸⡃⠀⠀⢘⡇⠈⣨⠏⠀⣀⡀⢙⣷⡎⠳⢯⣵⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣾⠀⠀⠀⢸⠇⣴⣯⡀⠘⠋⠁⠀⠁⠀⣀⣾⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⡾⠁⠉⠁⠀⠀⠀⢀⣀⡴⠞⠉⠈⣿⣦⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡄⠀⢸⣟⠷⠶⠶⠶⠖⠞⠋⠁⠀⠀⠀⠀⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⠀⣾⠛⠃⠉⠀⠀⠀⠀⠀⠀⣤⠶⠖⠛⠳⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣼⣿⣶⣦⣤⣤⣤⡄⠀⢠⡞⣁⣸⡆⠀⠀⠀⠙⢿⡴⠤⣤⣤⣤⣀⣄⣀⣀⢀⢀⠀⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⣹⠿⢿⣏⣉⣀⢀⡴⠿⠷⣿⣯⣴⡶⠀⠀⠀⣼⠃⠀⠀⠀⠀⠀⠁⠉⠉⠛⣿⠃⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⠁⠀⠀⠈⠉⠉⠉⠁⠀⣿⣿⡟⠻⣷⣷⣆⡾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠏⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠫⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⡶⠛⠉⠙⠋⢷⣄⡀⠀⠀⠀⠀⠀⠀⣠⠾⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠈⢻⡗⠶⢤⢤⣶⣆⣤⢴⣾⣛⠀⠀⠀⠀⠀⠈⠹⣟⠶⢦⣀⣀⣤⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡁⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⠀⠈⠉⠳⣷⡗⠘⠀⠀⠀⠙⣦⣄⡉⡉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⣹⣆⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣄⠀⠀⠀⠀⠘⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
      defend: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣦⣀⠀⠀⠀⠀ ⠀⠀⠀⣄⠀⠀⠀⠀⠀⠀⠀⣀⡴⠞⢯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⠀⡉⠳⢦⣀⠀⠀⢠⡞⠿⠖⠳⠲⣆⣠⣴⠛⠉⣠⠆⣹⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀⠻⣄⠀⠉⠻⠷⠋⠀⠀⠀⠀⠀⠈⠈⠉⠛⢶⡋⢠⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠈⠳⣦⢤⡀⠀⠀⠀⠈⠻⣄⠀⠀⠀⠀⠀⢹⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣳⠆⣰⠏⠘⣇⠀⠀⣀⠴⠄⠸⣗⣃⣄⣄⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⣾⠀⠀⠈⣷⣾⣽⣷⣦⣴⠏⣽⢳⣿⣆⠀⢺⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⠠⡗⠀⠀⠀⣾⡇⣾⣿⣷⠀⠀⢿⢸⣿⡟⣷⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⣗⠀⠀⢀⡿⢢⣽⡿⠯⠀⢀⠀⠛⠛⠙⢿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣷⠀⠀⢸⡃⠀⠀⠀⠀⠸⠛⠂⠀⢀⣠⣞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⣾⢤⣄⣄⣀⣠⣠⡴⣶⢾⢯⣅⣹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣻⣰⡇⠀⠀⢈⡼⠋⠉⠹⣏⠀⠀⠀⠉⠉⠳⠶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣦⣀⣴⠋⠁⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠙⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡿⣿⠟⠁⠀⠀⠀⠀⠀⠀⢻⡀⠀⠀⠀⠀⠀⠀⠨⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠏⣰⠋⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣯⣰⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⣀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠙⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⠀⠀⠀⠀⢀⣼⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠷⣄⣀⣰⠏⠙⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠳⣤⣠⡴⠖⠛⠉⠋⠋⠛⠓⠛⠁⠀⠈⠉⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
    };
  }
  get hp() {
    let temp = parseInt(this._hp * this._hpPercent);
    return temp;
  }
  set hp(value) {
    // 데미지 받으면 음수로 집어넣기
    let temp = parseInt((this.hp + value) / this._hp);
    if (temp >= 1) {
      temp = 1;
    }
    this._hpPercent = temp;
  }
  level_up() {
    this._level++;
    this._playerSkillPoint += 5;
    this._exp = this._exp - this._levelUpExp;
    this._hp += parseInt((this._str / 5) * 10 + 10);
    this._atck += parseInt((this._str * 5) / 10 + 1); // 기본 1올라감 힘비례 해서 강해짐
  }
}

class Monster {
  //몬스터 데이터
  constructor() {
    this._hp = 100;
    this._atck = 1;
    this._exp = 40;
    this._firstCheck = true;
    this.dotSprit = {
      1: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⠶⠶⠷⢶⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡟⠋⠀⠀⠀⠀⠀⠀⠉⠛⠻⢶⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠿⣶⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣄⣀⠀⠀⠀⠀⠈⠹⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡟⠋⠉⠛⣧⡀⠀⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡏⠀⠀⠀⠀⠘⣷⡀⠀⠀⠀⠀⠀⠘⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣾⣁⣀⢀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⠀⠀⠀⠀⠘⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠿⠿⢿⢿⣿⡧⠀⠀⣄⡀⠀⢀⣿⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠩⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⢨⣿⣯⡀⣼⣿⣿⣆⢐⣿⠀⠀⠀⠀⠀⠀⢸⣯⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣾⠿⣦⣠⣾⣿⣿⣾⣿⣿⣿⣷⢨⡗⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣸⡏⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣟⠸⣇⠀⠀⠀⠀⠀⠀⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣼⠏⠀⠀⠘⣿⠟⢽⣿⣿⣿⣿⡿⠁⠨⣷⠀⠀⠀⠀⠀⣨⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢠⡾⠋⠀⠀⠀⠀⠀⠀⠚⢿⢿⠟⠏⠀⠀⠀⠹⠷⣶⣤⣴⣼⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣗⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢠⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣺⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣆⠀⠀⠀⠀⠀⠀
⠀⢀⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣦⠀⠀⠀⠀⠀
⠀⢐⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣷⡀⠀⠀⠀
⠀⠠⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⣄⠀⠀
⠀⠐⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀
⢠⣾⣿⣿⣿⣿⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇
`,
      2: `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⣶⣶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⡶⣷⣶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⡿⠛⠁⠀⠀⠈⠉⠻⣷⣄⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠉⠛⢿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣦⠀⠀⢀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠘⢻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣾⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣇⢀⣿⠏⠀⠀⠀⠀⠀⣠⣶⠆⠀⠀⠀⠀⢹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣾⡟⠀⠀⠀⠀⠀⣄⡀⠀⠀⠀⠀⠀⠀⠘⣿⣿⡏⠀⠀⠀⠀⢀⣼⡿⠁⠀⠀⠀⠀⠀⢨⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠰⣿⠁⠀⠀⠀⠀⠀⢻⣷⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⢀⣾⠟⠀⠀⠀⠀⠀⠀⠀⣸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⣧⠀⠀⠀⠀⠀⠀⡻⡇⡀⡀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⢀⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠛⠃⢀⣤⣴⣾⠿⠟⠟⠟⠟⢿⣶⣤⡀⠀⠀⠀⠀⠀⢀⣠⣾⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⣿⣆⠀⠀⠀⠀⠀⠀⠀⢠⣾⡟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣦⡀⣠⣶⣶⣿⣿⣷⣦⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⣿⣄⠀⠀⠀⠀⠀⣰⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣷⡈⠉⠀⠀⠀⠀⠈⠉⠛⠻⢿⣦⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣷⣤⡀⠀⣰⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣄⠀⠀⠀
⠀⠀⠀⠀⠀⣀⣴⡾⠿⠻⠛⠉⠀⢰⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣿⠄⢀⣤⣤⣤⣤⣤⠀⠀⠀⠀⠘⣿⡄⠀⠀
⠀⠀⠀⣠⣾⠟⠉⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠈⠉⠉⠉⠉⠁⠀⠀⠀⠀⣼⡿⠀⠀⠀
⠀⢀⣼⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⣺⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣀⣾⡟⠁⠀⠀⠀
⠀⣾⡟⠀⠀⠀⠀⢀⣠⣤⣶⣶⣶⢸⣿⠀⠀⠀⠀⠀⣠⣶⣄⠀⠀⢠⣴⣾⣶⣄⣰⣿⣟⢋⣥⠀⣦⣤⣀⣀⣀⣤⣶⡿⠋⠀⠀⠀⠀⠀
⢰⣿⠁⠀⠀⠀⠿⠿⠛⠉⠀⠀⠀⠘⣿⣄⣤⣤⢀⣴⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣄⠁⠀⠈⠙⠻⠿⣿⣯⣁⠀⠀⠀⠀⠀⠀⠀
⢺⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⠿⣿⠄⠀⠀⠀⠀⠀⠈⠙⠻⣷⣄⠀⠀⠀⠀⠀
⠸⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡿⣿⣿⠿⠋⠈⠻⢿⡿⠛⠋⠀⠀⠉⠛⠋⣸⣿⠁⢶⣶⣤⣄⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀
⠀⠙⣿⣤⡀⠀⠀⢀⣀⣤⣶⣦⣄⠀⠀⠿⣷⣌⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠃⠀⠀⠈⠉⠋⠀⠀⠀⠀⣸⡿⠀⠀⠀⠀⠀
⠀⠀⠈⠙⠿⠿⠿⠟⠛⢉⣿⡟⠁⠀⠀⠀⢈⡻⢿⣶⣤⣀⣀⠀⠀⠀⢀⣠⣤⣶⡿⠋⠁⢀⣄⠀⠀⠀⠀⠀⢀⣠⣾⠟⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡿⠀⠀⠀⠀⣰⣿⠃⠀⠈⠉⠛⠻⠿⠿⠿⠟⠛⠉⠀⠀⠀⠾⣿⡿⢷⣶⣤⣴⣶⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠠⣿⡃⠀⠀⠀⢠⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⠀⠀⠀⠀⠀⠹⣿⡀⠀⠉⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠨⣿⡂⠀⠀⠀⠻⠇⠀⠀⠀⠀⢺⣷⠀⠀⠀⠀⠀⠿⠇⠀⠀⠀⠀⠨⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣽⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡿⠀⠀⠀⠀⢀⣠⣶⠿⢿⣶⣄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣄⠀⠀⠀⠀⠀⠀⣀⣼⡿⠙⣿⣿⣦⡀⠀⠀⠀⠀⣀⣤⣾⠟⠁⠀⠀⠀⣠⣾⠟⠁⠀⠀⠈⠻⣷⡄⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣷⣶⣴⣴⣶⠿⠟⠋⠀⠀⢽⡯⠙⢿⣶⣴⣶⣿⠟⢻⣷⣤⣀⠀⢀⣾⡟⠁⠀⠀⠀⠀⠀⠀⠙⣿⡄⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠁⠀⠀⠀⠀⠀⠀⣺⡯⠀⠀⠀⠀⣺⣿⣤⣀⠈⠙⠛⠿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⠃⠀⠀⢀⣴⡿⠃⠙⠻⢷⣦⣄⠀⠀⠀⢠⣦⣴⣾⣄⠀⣀⡀⣀⡀⣿⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⠁⠀⢀⣰⣾⠏⠁⠀⠀⠀⠀⠉⣿⡇⠀⠀⣾⣿⣿⣿⣿⣶⣿⣿⡟⢿⢿⠇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⠋⠀⠀⣤⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⢿⡇⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣆⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⠁⠀⣠⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⠀⠀⠀⠙⠿⠿⠟⠛⠛⠉⣿⡇⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠏⠀⠀⢰⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣷⣶⣤⣤⣀⣀⣄⣤⣤⣾⠿⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠙⠉⠉⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣷⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`,
    };
  }
  get hp() {
    if (this._firstCheck) {
      this._firstCheck = false;
      this._hp += (this._hp / 10) * day;
    } else return this._hp;
  }
  set hp(value) {
    this._hp = value;
  }
  drop_item() {
    // 몬스터의 아이템 드랍
  }
  attack() {
    // 몬스터의 공격
  }
  die() {
    if (this._hp <= 0) {
    }
  }
}

export async function startGame() {
  console.clear();
  const player = new Player();
  const dice = new Dice();
  await playerStatusDice(dice, player);
  while (day <= 100) {
    while (true) {
      // 입력값 받아오기
      console.clear();
      displayDefolt(player);
      console.log(
        chalk.green(`\n1. 인벤토리 2. 숲속으로 떠니기 3. 상태확인 4. 휴식`),
      );
      const choice = readlineSync.question(`choose_number : `);
      switch (parseInt(choice)) {
        case 1:
          playerInventory_Status = 0;
          await inventory(player);
          break;
        case 2:
          await adventure(player);
          break;
        case 3:
          await status(player);
          break;
        case 4:
          await camp(player);
          break;
        default:
          break;
      }
    }
  }
}
const adventure = async (player) => {
  let stageMaxCount = 9; //최대 값
  // 아랫값 선택지 선택시 다음 스테이지 이동 스텍 확률
  let leftPercent = 0;
  let middlePercent = 0;
  let rightPercent = 0;
  const changePercent = (value) => {
    // 각 길의 확률 랜덤 설정
    let index = 0; //반복 확인 값
    while (value > 0) {
      let temp = parseInt(Math.random() * value);
      switch (index) {
        case 0: //럭 증가
          rightPercent = temp;
          value -= temp;
          break;
        case 1: // 힘 증가
          leftPercent = temp;
          value -= temp;
          break;
        case 2: // 덱 증가
          middlePercent = value;
          value = 0;
          break;
      }
      index++;
    }
  };
  const checkDayCount = () => {
    if (dayStack >= 3) {
      day++; // 날짜
      dayStack = 1;
    } else {
      dayStack++; // 날 오전 오후 저녁 정하기 위한 스텍
    }
  };
  const checkStageCount = (value) => {
    // 길찾는 매커니즘
    if (randomMaker(value)) {
      // 성공
      stageCount++;
      if (stageCount > stageMaxCount) {
        stageStack++;
        stageCount = 1;
      }
      return true;
    } else {
      //실패
      stageCount--;
      if (stageCount <= 1 && stageStack > 1) {
        stageStack--;
        stageCount = stageMaxCount - 1;
      } else {
        if (stageCount <= 1) {
          stageCount = 1;
        }
      }
      return false;
    }
  };

  while (true) {
    console.clear();
    changePercent(100);
    displayAdventure(player);
    console.log(
      chalk.green(
        `\n1.오른쪽으로 이동 ${rightPercent}% 2.왼쪽으로 이동 ${leftPercent}% 3.앞쪽으로 이동 ${middlePercent}% 4. 베이스켐프로 돌아가기 `,
      ),
    );
    const choice = readlineSync.question(`choose_number : `);
    switch (parseInt(choice)) {
      case 1:
        checkDayCount();
        checkStageCount(rightPercent);
        break;
      case 2:
        checkDayCount();
        adventureEvent_Succes(player, checkStageCount(leftPercent));
        break;
      case 3:
        checkDayCount();
        adventureEvent_Failed(player, checkStageCount(middlePercent));
        break;
      case 4:
        return;
      default:
        console.log(chalk.green(`다시 입력해주세요.`));
        break;
    }
  }
};
const adventureEvent_Special = async (player) => {
  while (true) {
    console.clear();
    // 입력값 받아오기
    displayFristDice(dice);
    console.log(chalk.green(`\n1.선택 2.다시 `));
    const choice = readlineSync.question(`choose_number : `);
    switch (parseInt(choice)) {
      case 1:
        player._luck = dice._luck;
        player._str = dice._str;
        player._dex = dice._dex;
        return;
      case 2:
        break;
      default:
        console.log(chalk.green(`다시 입력해주세요.`));
        break;
    }
  }
};
const adventureEvent_Succes = async (player, check) => {
  let getItemId = 1;

  while (true) {
    console.clear();
    // 입력값 받아오기
    displayAdventure_Succes(check, getItemId);
    console.log(
      chalk.green(`\n1. 아이템 획득. 2. 아이템 변경 3. 무시하고 가기 `),
    );
    const choice = readlineSync.question(`choose_number : `);
    switch (parseInt(choice)) {
      case 1:
        let index = checkHaveItem(getItemId);
        playerInventory[index][0] = getItemId;
        playerInventory[index][1]++;
        return;
      case 2:
        playerInventory_Status = 2;
        inventory(player, getItemId);
        if (checkInventoryChange === false) {
          //교환 체크
          break;
        } else {
          checkInventoryChange = false;
          return;
        }
      default:
        return;
    }
  }
};
const adventureEvent_Battle = async (player, check) => {
  const monster = new Monster();
  while (player._hp > 0) {
    console.clear();
    displayStatus(day, player, monster);

    logs.forEach((log) => console.log(log));

    console.log(chalk.green(`\n1. 공격한다 2. 아무것도 하지않는다.`));
    const choice = readlineSync.question('choose_number : ');

    // 플레이어의 선택에 따라 다음 행동 처리
    logs.push(chalk.green(`${choice}를 선택하셨습니다.`));
  }
};
const adventureEvent_Failed = async (player, check) => {
  while (true) {
    console.clear();
    // 입력값 받아오기
    displayAdventure_Failed(check);
    console.log(chalk.green(`\n1. 다시 복귀한다. `));
    const choice = readlineSync.question(`choose_number : `);
    return;
  }
};
const inventory = async (player, change_id = 0, check_change) => {
  let logs = [];
  while (true) {
    switch (playerInventory_Status) {
      case 0: // 기본 상태
        console.clear();
        displayinventory();
        console.log(chalk.green(`\n1. 이전 창으로 이동. `));
        const choice_defolt = readlineSync.question('choose_number : ');
        return;
      case 1: // 판매 상태
        console.clear();
        displayinventory();
        console.log(
          chalk.blue(`\n판매할 배낭 칸 입력 0~5 까지 `) +
            chalk.green(` 6. 이전 창으로 이동.  `),
        );
        const choice_sell = readlineSync.question('choose_number : ');
        if (
          parseInt(choice_sell) >= 0 &&
          parseInt(choice_sell) < Object.keys(playerInventory).length
        ) {
          console.log(
            chalk.blue(`\n판매할 수 입력! `) +
              chalk.green(` 보유 수를 지나치게 되면 인벤토리 창으로 돌아감 `),
          );
          const choice_sell_sub = readlineSync.question('choose_number : ');
          if (
            // 위에 입력한 값이 보유하고있는 값 내에 있는지 체크하는중
            playerInventory[parseInt(choice_sell)][1] >=
            parseInt(choice_sell_sub)
          ) {
            playerInventory[parseInt(choice_sell)][1] -=
              parseInt(choice_sell_sub);
            playerGold = parseInt(
              //골드 계산식
              player._luck >= 40 // 럭이 일정수치 이상이면 가격을 더쳐줌
                ? itemData[parseInt(choice_sell)][0] *
                    2 *
                    parseInt(choice_sell_sub)
                : (itemData[parseInt(choice_sell)][0] / 2) *
                    parseInt(choice_sell_sub),
            );
            if (playerInventory[parseInt(choice_sell)][1] == 0) {
              //인벤 초기화
              playerInventory[parseInt(choice_sell)][0] = 0;
            }
          } else break;
        }
      case 2: // 교환 상태
        console.clear();
        displayinventory();
        console.log(
          chalk.blue(`\n변경할 배낭 칸 입력 0~5 까지 `) +
            chalk.green(` 6. 이전 창으로 이동.  `),
        );
        const choice_change = readlineSync.question('choose_number : ');
        if (
          parseInt(choice_change) >= 0 &&
          parseInt(choice_change) < Object.keys(playerInventory).length
        ) {
          console.log(
            chalk.blue(`\n${parseInt(choice_change)} 칸을 입력하셨습니다.`) +
              chalk.green(`1. 변경  2. 취소. `),
          );
          const choice_change_sub = readlineSync.question('choose_number : ');
          if (parseInt(choice_change_sub) == 1) {
            if (playerInventory[parseInt(choice_change_sub)][0] === change_id) {
              playerInventory[parseInt(choice_change_sub)][1]++;
              checkInventoryChange = true;
            } else {
              playerInventory[parseInt(choice_change_sub)][0] = change_id;
              playerInventory[parseInt(choice_change_sub)][1] = 1;
              checkInventoryChange = true;
            }
          }
        }
        return;
      default:
        return;
    }
  }
};

const status = async (player) => {
  let logs = [];
  console.clear();
  displayStatus(player);
  while (true) {
    console.log(
      chalk.green(
        `\n1. LUCK 증가 2. STR 증가 3. DEX 증가 4. 선택 창으로 이동 `,
      ),
    );
    const choice = readlineSync.question('choose_number : ');
    switch (parseInt(choice)) {
      case 1:
        if (player._playerSkillPoint > 0) {
          player._playerSkillPoint--;
          player._luck++;
          console.clear();
          displayStatus(player);
        } else {
          console.log(chalk.green('스킬 포인트가 모자랍니다'));
        }
        break;
      case 2:
        if (player._playerSkillPoint > 0) {
          player._playerSkillPoint--;
          player._str++;
          console.clear();
          displayStatus(player);
        } else {
          console.log(chalk.green('스킬 포인트가 모자랍니다.'));
        }
        break;
      case 3:
        if (player._playerSkillPoint > 0) {
          player._playerSkillPoint--;
          player._dex++;
          console.clear();
          displayStatus(player);
        } else {
          console.log(chalk.green('스킬 포인트가 모자랍니다.'));
        }
        break;
      case 4:
        return;
      default:
        console.log(chalk.green('잘못된 입력입니다.'));
        break;
    }
  }
};
const camp = async (player) => {
  while (player.hp > 0) {
    console.clear();
    displayCamp(player);
    console.log(chalk.green(`\n1. 휴식을 취하기 2. 베이스캠프로 돌아가기.`));
    const choice = readlineSync.question('choose_number : ');
    switch (parseInt(choice)) {
      case 1:
        day++;
        dayStack = 1;
        player.hp = player._hp * (3 - stageStack + 1) * 0.2;
        return;
      case 2:
        return;
      default:
        console.log(chalk.green(`다시 입력해주세요.`));
        break;
    }
  }
};
const playerStatusDice = async (dice, player) => {
  dice.random();
  while (true) {
    console.clear();
    // 입력값 받아오기
    displayFristDice(dice);
    console.log(chalk.green(`\n1.선택 2.다시 `));
    const choice = readlineSync.question(`choose_number : `);
    switch (parseInt(choice)) {
      case 1:
        player._luck = dice._luck;
        player._str = dice._str;
        player._dex = dice._dex;
        return;
      case 2:
        dice.random();
        break;
      default:
        console.log(chalk.green(`다시 입력해주세요.`));
        break;
    }
  }
};
function displayFristDice(dice) {
  console.clear();
  console.log(
    chalk.magentaBright(
      `\n========================= 주사위 를 던져주세요 ========================`,
    ),
  );
  console.log(
    chalk.cyanBright(`
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⣶⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⠿⠟⠛⠉⠁⠈⠙⠿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⡾⠟⠉⠀⠀⠀⣠⣤⣄⡀⠀⠀⠀⠉⠻⢷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⠿⠛⠁⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠉⠛⠿⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⡾⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⢿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⣶⣄⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣀⣤⣶⠟⠋⠁⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠙⠻⣶⣄⡀⠀⠀⠀
⠀⠀⣀⣤⣶⠿⠛⠉⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣷⠄⠀⠀⠀⠀⠀⣠⣴⣶⣤⡀⠀⠀⠀⠀⠀⣾⣿⣿⣿⡆⠀⠀⠀⠀⠈⠙⠻⣶⣤⡀
⢰⡾⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⡿⠁⠀⠀⠀⠀⠐⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⢿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⣻⡇
⠘⣿⡀⠿⠷⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠃⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⢀⣠⣴⡾⠟⠂⢽⡇
⠀⢻⣇⠀⠀⠀⠉⠛⠿⣶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⠟⠋⠁⠀⠀⠀⣺⡇
⠀⠘⣿⡀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⢶⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⣀⣴⡾⠛⠉⠀⠀⠀⠀⠀⠀⠀⣺⡇
⠀⠀⢻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⢷⣦⣄⡀⠀⠀⠸⣿⣿⡿⠏⠀⠀⢀⣤⣶⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇
⠀⠀⠘⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⠷⣶⣄⡀⠀⠀⣀⣤⡾⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⣿⠆
⠀⠀⠀⢻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢃⣄⠾⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⠀⠀⣿⠁
⠀⠀⠀⠸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⢰⣾⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⢨⣿⠀
⠀⠀⠀⠀⢿⡇⠀⠀⠀⠀⠀⠀⠀⢠⣴⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠙⢿⣿⠿⠃⠀⠀⣴⣶⣦⡀⠀⠀⠀⠀⠀⢸⣏⠀
⠀⠀⠀⠀⢸⣷⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⡇⠀⠀⡀⡀⠀⢸⡗⠀
⠀⠀⠀⠀⠀⢿⡆⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⠋⠀⠀⣼⣿⣿⡆⢸⡯⠀
⠀⠀⠀⠀⠀⠘⣿⡀⠀⠀⠀⠀⠀⠀⠉⠋⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠿⠟⠁⣸⡿⠀
⠀⠀⠀⠀⠀⠀⢻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠋⠁⠀
⠀⠀⠀⠀⠀⠀⠈⢿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⠟⠉⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⢷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⠿⠋⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣿⠀⠀⠀⠀⠀⠀⠀⢀⣤⡾⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⢷⣤⣀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⢀⣴⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣶⣄⡀⠀⠀⢸⣿⠀⠀⢀⣠⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣶⣄⣸⣿⣠⣴⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`),
  );
  console.log(
    chalk.magentaBright(`| LUCK : ${dice._luck} `) +
      chalk.magentaBright(`| STR : ${dice._str} `) +
      chalk.magentaBright(`| DEX : ${dice._dex} `),
  );
  console.log(
    chalk.magentaBright(
      `====================================================================\n`,
    ),
  );
}
function displayDefolt(player) {
  console.log(
    chalk.magentaBright(
      `\n===================== 여정을 선택해 주세요! ====================`,
    ),
  );
  console.log(
    chalk.cyanBright(`
      ⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠
      ⢻⡀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⢀⡟
      ⠘⢧⠀⠀⠀⠀⣰⠏⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠹⣆⠀⠀⠀⢀⡼⠁
      ⠀⠈⢷⡄⢀⡼⠃⠀⠸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠘⢧⠀⣠⠞⠁⠀
      ⠀⠀⠀⠙⢿⡅⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⠀⠀⠀⢸⡿⠉⠀⠀⠀
      ⠀⠀⠀⠀⠈⡧⠀⠀⠀⠀⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠀⠀⠀⠀⢼⠁⠀⠀⠀⠀
      ⠀⠀⠀⠀⣸⠇⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠁⠀⠀⠀⠀⠸⣇⠀⠀⠀⠀
      ⠀⣤⠦⠟⠁⠀⠀⠀⠀⠀⠀⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠏⠀⠀⠀⠀⠀⠀⠀⠈⠳⢦⣤⠀
      ⠀⠈⠻⣄⠀⠀⠀⠀⠀⠉⠳⠲⢾⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⡷⠖⠟⠁⠀⠀⠀⠀⠀⣠⠟⠀⠀
      ⠀⠀⠀⠙⣦⠀⠀⠀⠀⠀⠀⠀⠘⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡼⠁⠀⠀⠀⠀⠀⠀⠀⣼⠋⠀⠀⠀
      ⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠈⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠁⠀⠀⠀⠀⠀⠀⢀⡾⠁⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠻⣆⡀⠀⠀⠀⠀⠀⣀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡀⠀⠀⠀⠀⠀⢀⣴⠛⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⢀⣻⠄⠀⢰⡾⠚⠉⠀⠀⠀⠀⠀⠀⣀⣀⢀⡀⠀⠀⠀⠀⢀⣀⣄⠀⠀⠀⠙⠓⢶⡆⠀⢐⣯⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠐⢷⣋⠉⠙⢳⡟⠃⠀⠀⠀⠀⠀⣀⣰⠞⠉⠈⠁⠉⠛⣦⣤⠞⢋⣁⠈⢷⡀⠀⠀⠀⠈⠙⣾⠋⠉⣙⡷⠂⠀⠀⠀⠀⠀
      ⠲⢶⠴⣤⣤⣠⣀⣍⣛⣶⢼⡇⠀⠀⠀⢀⡴⠞⢩⡏⠀⠀⠀⠀⠀⠀⠘⣏⠛⠿⣭⣧⠸⣇⠀⠀⠀⠀⢀⡷⣾⣫⣉⣠⣠⣤⡤⡴⡶⠒
      ⠀⠠⣇⠀⠀⠀⢽⠈⠀⠀⠸⡅⠀⠀⠀⠹⢦⣀⣼⡇⠀⠀⠀⠀⠀⠀⠠⣗⣄⡴⢞⣹⠄⣹⠄⠀⠀⠀⢐⡇⠀⠀⢁⡯⠀⠀⠀⢴⠀⠀
      ⠀⠀⣿⠖⠶⣄⢸⡅⠀⠀⠨⡇⠀⠀⠀⠀⠀⠁⠈⣧⠀⣀⠀⠀⠀⠀⢨⣷⡟⣋⣋⣁⡴⠏⠀⠀⠀⠀⢸⡇⠀⠀⢰⡇⢰⠖⠶⣿⠀⠀
      ⠀⠀⢽⠀⠀⢿⣸⡃⠀⠀⢈⡿⠒⠂⠀⠀⠀⠀⠀⣸⠟⠙⠓⠶⠾⡖⢻⣿⣿⠉⠀⠁⠁⠀⠀⠀⠐⠚⢾⡃⠀⠀⢸⡇⡿⠀⢀⡗⠀⠀
      ⠀⠀⢺⠅⠀⠈⠙⢙⡦⠀⠘⠃⠀⠀⠀⠀⠀⠀⣰⠏⠀⠀⠀⠀⠀⠀⠀⠹⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣧⣄⢴⡋⠋⠁⠀⢐⡇⠀⠀
      ⠀⠀⢸⡇⠀⠀⠀⣸⠃⠀⠀⠀⠀⠀⠀⠀⠀⢰⣾⣷⡶⠶⠆⠛⠙⠛⠛⢻⡁⠀⠀⠀⠀⠀⢀⡴⠛⠚⠞⠥⣾⣝⣦⠀⠀⠀⢸⠇⠀⠀
      ⠀⠀⠈⡧⠀⠀⠀⠋⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⡿⣿⠅⠀⠀⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⣾⠁⠀⠀⠀⠀⠀⠈⢹⡆⠀⠀⣼⠁⠀⠀
      ⠀⠀⠀⣻⠀⣼⠛⠆⠀⠀⠀⠀⠀⠀⢠⣾⡿⠃⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠈⢧⣀⣠⣀⣀⣀⡀⣸⠟⣧⠀⡯⠀⠀⠀
      ⠀⠀⠀⠸⠅⠗⠀⠀⠀⠀⠀⠀⠀⠐⠿⠋⠀⠀⣼⠃⠀⠀⢀⣠⠴⣤⡀⠀⠀⠹⢦⡀⠀⠀⠀⠀⠉⠈⣽⣹⠉⠉⠉⠀⠺⠨⠇⠀⠀⠀
      ⠀⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣇⣀⣠⣰⠞⠁⠀⠀⠀⢹⣶⣾⣿⠁⠀⠀⠀⠀⠀⠀⠈⠋⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀
      ⠀⠀⣠⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣯⠀⠀⠀⠀⢠⣾⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⣄⠀⠀
`),
  );
  console.log(
    chalk.magentaBright(`| 날짜 : ${day} `) +
      chalk.magentaBright(`| 시간 : ${dayStack} : ${dayName[dayStack]}`) +
      chalk.magentaBright(`| 플레이어 소지금 : ${playerGold} : G `),
    chalk.magentaBright(`| 남은 체력 : ${player.hp} : HP `),
  );
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
function displayAdventure(player) {
  console.log(
    chalk.magentaBright(
      `\n===================== ${stageName[stageStack]} ====================`,
    ),
  );
  console.log(
    dayStack != 3
      ? chalk.cyanBright(playerAdventureSprit_AM[stageStack])
      : chalk.cyanBright(playerAdventureSprit_PM[stageStack]),
  );
  console.log(
    chalk.cyanBright(
      `| 날짜 : ${day} ${dayName[dayStack]}   : Stage : ${stageName[stageStack]} `,
    ) +
      chalk.blueBright(
        `| 플레이어 정보 : ${player._level} | 남은 경험치 | ${
          player._levelUpExp - player._exp
        } | 남은 체력 :  ${player.hp} | `,
      ),
  );
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
function displayAdventure_Failed(check) {
  console.log(
    chalk.magentaBright(
      `\n======================= ${stageName[stageStack]} ======================`,
    ),
  );
  console.log(chalk.cyanBright(playerAdventureSprit_defoltEvent[0]));
  console.log(
    chalk.cyanBright(
      check
        ? `| 아무것도 얻지 못하였습니다. ㅠ^ㅠ 그리고 길도 잃어버렸습니다. |`
        : `| 아무것도 얻지 못하였습니다. ㅠ^ㅠ 하지만 제대로 길은 맞는 방향입니다. |`,
    ),
  );
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
function displayAdventure_Succes(check, index) {
  console.log(
    chalk.magentaBright(
      `\n======================= ${stageName[stageStack]} ======================`,
    ),
  );
  console.log(chalk.cyanBright(playerAdventureSprit_defoltEvent[index]));
  console.log(
    chalk.cyanBright(
      check
        ? `| ${itemData[index][1]}을 획득 하셨습니다. 하지만 길을 잃어버렸습니다. |`
        : `| ${itemData[index][1]}을 획득 하셨습니다. 그리고 제대로 길은 맞는 방향입니다. |`,
    ),
  );
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
function displayinventory() {
  console.log(
    chalk.magentaBright(
      `\n=========================== 인벤토리 ==========================`,
    ),
  );
  console.log(
    chalk.magentaBright(
      `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡷⢦⡀⠀⠀⠀⠀⣰⢶⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⠀⠙⢦⡀⠀⣰⠏⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠇⠀⠀⠈⢳⣤⡏⠀⡀⠘⣇⠀⠀⣀⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠋⠀⠀⠀⠀⠀⡿⠀⢸⡇⠀⢻⣠⡞⠉⢸⣇⣀⣄⣀⣤⣴⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠃⠀⠀⠀⠀⠀⢸⡇⠀⢺⡅⠀⠸⠋⠀⠀⠀⠉⠀⠀⠀⠀⠉⠓⢶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠸⡇⠀⠸⡇⡀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⣻⠃⠀⠁⣀⠀⠀⠀⠀⠀⢸⣶⠆⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡇⠀⠀⠀⠀⠀⠀⠀⣹⠀⢠⡏⠀⠀⠀⢽⠷⣄⡀⠀⠀⠈⣸⣶⠓⢦⡀⢐⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⢰⡏⠀⣺⠁⠀⠀⢀⡟⠀⠨⡝⠳⠶⢶⣿⣿⣇⢼⡃⠠⣇⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣆⣀⢠⡞⢻⠂⢀⡏⠀⠀⠰⢾⠗⠛⠛⠂⠀⠀⢸⣿⣿⢫⣿⣆⣸⠏⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⡟⠀⢹⡄⢸⠇⠀⠀⢠⡟⠀⢀⣀⣀⣀⡀⠀⠉⠋⠺⢛⣈⡙⠳⠦⠙⣧⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⠿⠓⠓⠻⠳⣼⣇⠀⣠⠟⠀⣴⢿⣩⡏⠉⠉⣶⣶⢦⡀⠀⠈⢹⣧⣴⣞⣅⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⠟⠁⠀⠀⠀⠀⠀⠘⣿⣿⣿⣾⣶⣧⠀⢉⣤⣦⣦⡈⠁⢸⣇⣴⣶⣾⣅⠀⠀⠉⠈⢷⡀⠀⠀⠀⠀⠀⠀
`,
    ),
  );
  for (let key in playerInventory) {
    console.log(
      chalk.cyanBright(
        `| ${key} 번째 칸 : ${itemData[playerInventory[key][0]][1]} `,
      ) +
        chalk.blueBright(
          `| 아이템 정보 : ${itemData[playerInventory[key][0]][2]} `,
        ) +
        chalk.yellowBright(
          `| 가격 정보 : ${itemData[playerInventory[key][0]][0]} `,
        ) +
        chalk.yellowBright(`| 중첩 갯수 : ${playerInventory[key][1]} |`),
    );
  }
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
function displayStatus(player) {
  console.log(
    chalk.magentaBright(
      `\n===================== 플레이어 정보창 ====================`,
    ),
  );
  console.log(
    chalk.cyanBright(`
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠲⠒⢓⡓⠛⡓⠓⡓⠲⠶⢦⡀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠀⢾⡷⢾⡷⠘⠗⠐⠟⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠸⡇⠀⠀⠈⠁⣠⣀⢀⡄⣠⡄⣀⠀⣸⠃⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣀⠀⠀⠀⠀⢀⣀⠀⠀⠀⢀⡞⠹⡇⠀⠈⣧⠀⠀⣶⡆⠺⣿⣿⣿⣿⢃⣿⠁⣾⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⣏⠳⢦⡀⣠⠞⣻⡤⢶⣄⡟⢰⡆⢻⡀⠀⢻⠀⠀⢿⣷⣷⣿⣿⣿⣿⣿⠿⢸⡃⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⢻⡀⠈⠳⠋⠀⢀⡀⠈⠉⠛⢾⡅⢸⡇⠀⢸⡇⠀⠀⠈⠉⢿⣿⣿⡇⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡈⠹⢶⣄⠀⣀⡸⢿⡒⣆⣄⡀⢹⡾⠀⠀⠀⠛⠛⡓⠶⠺⠛⠛⠛⠋⠋⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⠆⡾⢙⡿⢩⣿⡾⢷⣿⣬⣻⢬⡇⠀⠀⠀⠀⣿⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡰⡏⠸⡇⢺⣿⡿⠘⣿⣿⣹⣿⡧⠀⠀⠀⣀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⡧⠀⣹⠏⠉⠰⠻⠂⢉⣨⣽⡇⠀⠀⢸⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⡄⣸⠗⠶⠤⠴⠞⠋⠁⣹⠇⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣳⣾⡀⠀⣀⣠⣤⣤⡴⠟⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⡟⣿⣾⣿⡟⢉⣈⢉⡾⠳⣝⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠞⠉⠀⠀⢹⣿⣿⣼⠇⠀⠈⠉⠻⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡶⠋⠀⠀⠀⠀⠀⢨⣿⣷⣾⠇⠀⠀⠀⠀⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠀⢼⠛⠿⢻⡇⠀⠀⢀⣤⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣷⣶⠶⠤⠴⠤⠟⠀⠀⠀⠹⣤⢶⡋⠀⠙⢷⣀⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣷⡞⠁⠀⠀⠀⠛⠛⠚⠶⠶⠖⠟⠂⠀⠁⠀⠀⢸⠏⣸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡶⠶⣟⠸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠃⠉⠉⣹⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠄⠁⠀⠙⠷⣤⡀⢠⣠⣤⡤⢤⠤⠶⠖⠶⠲⠖⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀      
`),
  );
  console.log(
    chalk.cyanBright(` | 현재 플레이어 레벨: ${player._level} `) +
      chalk.blueBright(`| 남은 스텟 포인트 : ${player._playerSkillPoint} `) +
      chalk.redBright(`| 스텟 정보 |`),
  );
  console.log(
    chalk.cyanBright(` | 0-0 `) +
      chalk.blueBright(`| Luck : ${player._luck}`) +
      chalk.redBright(
        ` | 기본적인 이벤트 나올 확률 더 좋은 상자가 나올 확률을 늘려줍니다. |`,
      ),
  );
  console.log(
    chalk.cyanBright(`| 0^0 `) +
      chalk.blueBright(`| STR : ${player._str}`) +
      chalk.redBright(
        `| 특정 이벤트에 필요하고 체력과 공격력 성장 계수에 영향을 끼칩니다. |`,
      ),
  );
  console.log(
    chalk.cyanBright(`| 0.0 `) +
      chalk.blueBright(`| DEX : ${player._dex}`) +
      chalk.redBright(
        `| 안 좋은 이벤트시 받는 데미지를 줄여주거나 괴물 회피 확률 또는 도주 확률을 늘려줍니다. |`,
      ),
  );
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
function displayCamp(player) {
  console.log(
    chalk.magentaBright(
      `\n======================== 캠핑 =======================`,
    ),
  );
  console.log(
    chalk.cyanBright(`
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣠⣠⣠⣠⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡴⠖⠛⠉⠁⠉⠈⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⢀⣀⡶⢶⡟⢻⡄⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⡶⠛⠛⠋⣿⠹⡇⢸⠂⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣇⠀⠙⠓⠛⠛⢛⣉⡉⢁⣀⣰⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠶⠶⠂⠛⢋⣉⡉⠁⠈⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⢀⣾⣧⣄⣄⢀⣀⣀⣄⣤⢤⡄⠀⣿⣿⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⣨⡉⠛⠳⠶⡟⠀⢀⡀⠈⠛⠛⢧⡴⢂⡼⠁⢀⣀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣄⠙⠶⢶⣦⠀⠀⠀⠹⣆⡀⠀⠀⢻⡞⠁⠀⢺⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢷⠂⣾⠉⢷⠴⠤⣤⡟⣿⣶⣆⡸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡀⡗⠀⣸⠷⠲⠆⠀⣿⣯⣸⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣧⡇⠀⢼⠁⠀⠰⠛⠆⢀⣠⡽⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷⢠⡟⠲⠶⠶⠲⠛⠉⠁⣻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣏⣀⣀⣴⢦⣠⣴⢶⣶⣏⣀⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣽⣿⣿⡿⣿⠀⠉⠓⠶⣄⣽⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⡄⣰⠏⠀⠀⢶⣦⡈⠻⣿⣿⡍⡧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠀⠀⣿⢹⣿⣿⡿⠁⠀⢰⢶⡼⠀⠙⣦⠈⠹⣾⠃⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣹⠇⠀⣿⠸⣿⣿⠁⠀⣰⠏⠀⠀⠀⠀⢘⡇⠀⠸⣧⣀⣄⣠⣴⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⣧⡤⣽⡿⣾⡇⠀⠸⡇⠀⠀⠀⠀⠀⢸⠇⠀⢨⡿⡇⠀⠈⢹⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡃⠀⠀⢸⡇⠈⣧⠀⢠⡿⡶⢶⣶⡶⢛⣻⣷⠆⣼⠁⢿⠀⠀⢹⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⣾⠁⠀⠹⣆⣸⡿⠋⡉⠋⠛⡛⣻⢿⣾⡃⠀⢸⣁⠀⣺⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⢀⡾⣿⣂⢀⣀⣸⣿⣿⣿⣿⣿⣿⢿⠿⡿⠟⠹⠒⠛⠙⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
      ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠉⠉⠉⠁⠁⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`),
  );
  console.log(
    chalk.cyanBright(` | 캠핑 시 오전으로 초기화 체력 남은 스택 비례 회복 `) +
      chalk.blueBright(`| 다음날까지 남은 스택 : ${3 - dayStack + 1} `) +
      chalk.redBright(
        `| 예상 회복량 :  ${player._hp * (3 - dayStack + 1) * 0.2} |`,
      ),
  );
  console.log(
    chalk.magentaBright(
      `=============================================================\n`,
    ),
  );
}
const checkHaveItem = (value) => {
  //아이템 id값 받음
  // 인벤토리에 있나 체크용도
  let checkItem_Temp = -1;
  let checkInventory_Null = -1;
  for (let key in playerInventory) {
    if (playerInventory[key][0] === value) {
      checkItem_Temp = key;
      return checkItem_Temp;
    } else if (checkInventory_Null === -1 && playerInventory[key][0] === 0) {
      checkInventory_Null = key;
    }
  }
  if (checkInventory_Null >= -1 && checkItem_Temp === -1) {
    checkItem_Temp = checkInventory_Null;
  } else if (checkItem_Temp === -1) {
    checkItem_Temp = null;
  }
  return checkItem_Temp;
};
const randomMaker = function (sucess) {
  //성공시 true 로 반환
  if (parseInt(Math.random() * 100) <= sucess - 1) {
    return true;
  } else {
    return false;
  }
};
